{
  "uid" : "dce60e1e11244760",
  "name" : "test_login",
  "fullName" : "tests.test_login_page.TestLoginPage#test_login",
  "historyId" : "3c779999a209d1dc27adabe4d61acaff",
  "time" : {
    "start" : 1762003524704,
    "stop" : 1762003524704,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception",
  "statusTrace" : "request = <SubRequest 'get_driver' for <Function test_login>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def get_driver(request):\n        if os.environ[\"BROWSER\"] == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # options.add_argument(\"--headless\")  # Запускает браузер в режиме без графического интерфейса (удобно для серверов)\n            options.add_argument(\"--no-sandbox\")  # Отключает режим песочницы для предотвращения проблем с правами доступа\n            options.add_argument(\"--disable-dev-shm-usage\")  # Отключает использование общей памяти /dev/shm (для Docker и серверных сред)\n            options.add_argument(\"--disable-gpu\")  # Отключает GPU, необходимое для headless-режима на некоторых системах\n            options.add_argument(\"--window-size=1920,1080\")  # Устанавливает фиксированный размер окна браузера\n            # options.add_argument(\"--window-size=1920,1080\")\n>           driver = webdriver.Chrome(options=options)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nfixtures/ui_fixtures.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:47: in __init__\n    super().__init__(\n../local/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:69: in __init__\n    super().__init__(command_executor=executor, options=options)\n../local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:261: in __init__\n    self.start_session(capabilities)\n../local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:362: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f549ebda710>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Chrome failed to sta...r/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception\n\n../local/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1762003523739,
      "stop" : 1762003523825,
      "duration" : 86
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "get_driver",
    "time" : {
      "start" : 1762003524704,
      "stop" : 1762003524944,
      "duration" : 240
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception\n\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.13/site-packages/pluggy/_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"/usr/local/lib/python3.13/site-packages/pluggy/_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^\n  File \"/usr/local/lib/python3.13/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.13/site-packages/pluggy/_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.13/site-packages/_pytest/fixtures.py\", line 1195, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.13/site-packages/_pytest/fixtures.py\", line 922, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/usr/workspace/fixtures/ui_fixtures.py\", line 15, in get_driver\n    driver = webdriver.Chrome(options=options)\n  File \"/usr/local/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py\", line 47, in __init__\n    super().__init__(\n    ~~~~~~~~~~~~~~~~^\n        browser_name=DesiredCapabilities.CHROME[\"browserName\"],\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<3 lines>...\n        keep_alive=keep_alive,\n        ^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/usr/local/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py\", line 69, in __init__\n    super().__init__(command_executor=executor, options=options)\n    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 261, in __init__\n    self.start_session(capabilities)\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 362, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 454, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "login"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_login_page"
  }, {
    "name" : "subSuite",
    "value" : "TestLoginPage"
  }, {
    "name" : "host",
    "value" : "f5ea54a63029"
  }, {
    "name" : "thread",
    "value" : "8-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_login_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "3e47b513c9a809e5",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception",
      "time" : {
        "start" : 1762003524359,
        "stop" : 1762003524359,
        "duration" : 0
      }
    }, {
      "uid" : "6c1926fba897fdeb",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception",
      "time" : {
        "start" : 1762003523738,
        "stop" : 1762003523738,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 5,
        "skipped" : 0,
        "passed" : 2,
        "unknown" : 0,
        "total" : 7
      },
      "items" : [ {
        "uid" : "3a1f419f2e7dc76f",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message: Кнопка войти не найдена на странице",
        "time" : {
          "start" : 1762003126010,
          "stop" : 1762003145335,
          "duration" : 19325
        }
      }, {
        "uid" : "56f7a3a4a0fe27ed",
        "status" : "passed",
        "time" : {
          "start" : 1762002065139,
          "stop" : 1762002074980,
          "duration" : 9841
        }
      }, {
        "uid" : "bbbf239601f04aee",
        "status" : "passed",
        "time" : {
          "start" : 1762001314847,
          "stop" : 1762001325035,
          "duration" : 10188
        }
      }, {
        "uid" : "d6b5720487bc9e97",
        "status" : "broken",
        "statusDetails" : "AttributeError: type object 'Credentials' has no attribute 'LOGIN'",
        "time" : {
          "start" : 1761848308927,
          "stop" : 1761848311996,
          "duration" : 3069
        }
      }, {
        "uid" : "2cb64dd1f16d4b12",
        "status" : "broken",
        "statusDetails" : "AttributeError: type object 'Credentials' has no attribute 'LOGIN'",
        "time" : {
          "start" : 1761847619536,
          "stop" : 1761847622971,
          "duration" : 3435
        }
      }, {
        "uid" : "47de57f570e1977d",
        "status" : "broken",
        "statusDetails" : "TypeError: 'NoneType' object is not iterable",
        "time" : {
          "start" : 1761846056663,
          "stop" : 1761846062120,
          "duration" : 5457
        }
      } ]
    },
    "tags" : [ "login" ]
  },
  "source" : "dce60e1e11244760.json",
  "parameterValues" : [ ]
}